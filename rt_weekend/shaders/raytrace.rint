#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"


layout(binding = 7, set = 1, scalar) buffer allSpheres_
{
    Sphere allSpheres[];
};

struct Ray
{
    highp vec3 origin;
    highp vec3 direction;
};



float hitSphere(const Sphere s, const Ray r)
{
    vec3  oc           = r.origin - s.center;
    vec3  rd           = normalize(r.direction);
    float ocl          = length(oc);

    float half_b       = dot(oc, rd);
    float c            = ocl * ocl - s.radius * s.radius;
    float discriminant = half_b * half_b - c;

    if(discriminant < 0) {
        return -1.0f;
    } else {
        float tmin = (-half_b - sqrt(discriminant));
        
        if (tmin > 0.0001f) {
            return tmin;
        }

        return (-half_b + sqrt(discriminant));
    }
}


void main()
{
    Ray ray;
    ray.origin    = gl_WorldRayOriginEXT;
    ray.direction = gl_WorldRayDirectionEXT;

    // Sphere data
    Sphere sphere = allSpheres[gl_PrimitiveID];

    float tHit    = -1;
    tHit = hitSphere(sphere, ray);
  
    // Report hit point
    if(tHit > 0.0) {
        reportIntersectionEXT(tHit, 0);
    }
}
